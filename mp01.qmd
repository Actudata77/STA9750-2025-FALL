---
title: "Mini Project 01"
author: "Hyacinthe Sarr"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format:
  html:
    code-fold: true
    code-summary: "Show technical details"
---

# Acquire the Data

```{r}
if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                  destfile=COUNTRY_TOP_10_FILENAME)
}
```


```{r}
if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)
```

## Data Import for the Global Top 10 dataset

```{r}
if (!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)

GLOBAL_TOP_10 <- read_tsv(GLOBAL_TOP_10_FILENAME)
```

Let's examine the structure of the dataset

```{r}
str(GLOBAL_TOP_10)
```

```{r}
glimpse(GLOBAL_TOP_10)
```

The dataset has 8,800 rows and 9 columns

By looking at the structure above, we do have some missing values not formatted as R would want it. Let's fix that issue

## Data Cleaning for the Global Top 10 dataset

```{r}
GLOBAL_TOP_10 <- GLOBAL_TOP_10 |>
    mutate(season_title = if_else(season_title == "N/A", NA, season_title))

str(GLOBAL_TOP_10)
```

Let's now confirm that the missing values are properly formatted for R.

```{r}
str(GLOBAL_TOP_10)
```
Great, let's turn to our second dataset that we will use. 

##  Data Import for the Country Top 10 dataset

```{r}
COUNTRY_TOP_10 <- read_tsv(COUNTRY_TOP_10_FILENAME, na = "N/A")


glimpse(COUNTRY_TOP_10)
```
We handle the missing values straight in the import phase in the `read_tsv`. We can see that missing values are format the way R wants it to.

After viewing the head and tail of the data, we want to just gain better sense of the data. For that let's chose a random number of rows other than the head or tail of the data by using the sample function to select random rows.
```{r}
GLOBAL_TOP_10[sample(nrow(GLOBAL_TOP_10), 10), ]
```

# Initial Data Exploration

```{r}
library(DT)
GLOBAL_TOP_10 |> 
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE))
```

The column names such as `weekly_hours_viewed` are not properly formatted. Large numbers in that column are also not presented with commas.
Let's fix that!

```{r}
library(stringr)
format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

GLOBAL_TOP_10 |> 
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```
We can now drop the `season_title` since here we are only showing films.

```{r}
GLOBAL_TOP_10 |> 
    select(-season_title) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```
Finally, let's convert `Runtime` to minutes

```{r}
GLOBAL_TOP_10 |> 
    mutate(`runtime_(minutes)` = round(60 * runtime)) |>
    select(-season_title, 
           -runtime) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))

```
Much better!

We are now ready for some Explanatory Data Analysis.

# EDA

**1. How many different countries does Netflix operate in?**

```{r, echo=FALSE}

countries <- COUNTRY_TOP_10 |>
 summarise(num_countries = n_distinct(country_name))
```
  
Netflix operates in *`r countries$num_countries`* countries.  

**2. Which non-English-language film has spent the most cumulative weeks in the global top 10?**
```{r}

non_english_top <- GLOBAL_TOP_10 |>
  filter(category == "Films (Non-English)") |>
  arrange(desc(cumulative_weeks_in_top_10)) |>
  slice(1) |>
  select(show_title, cumulative_weeks_in_top_10)

non_english_top
```

The non-English film with the most cumulative weeks in the global top 10 is *`r non_english_top$show_title`* with *`r non_english_top$cumulative_weeks_in_top_10`* weeks.










